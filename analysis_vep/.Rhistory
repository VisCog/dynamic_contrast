desc_matrix[2,1] - desc_matrix[2,2], NA,
desc_matrix[3,1] + desc_matrix[3,2],
desc_matrix[3,1] - desc_matrix[3,2])
lines(drawlinesX, drawlinesY, col="black", lwd=3)
points(c(1,2,3)-offset , desc_matrix[,1],
pch = c(pchAM, pchBD, pchNS),
col = c(colAM_solid, colBD_solid, colNS_solid),
cex = 1.5)
mtext('amblyopia', side = 1, at=1, font=1, line = 1, cex=.9, col=colAM_solid)
mtext('strabismus', side = 1, at=2, font=1, line=1,cex=.9, col=colBD_solid)
mtext('control', side = 1, at=3, font=1, line=1,cex=.9, col=colNS_solid)
}
stripchart_w_means_byeye <- function(DV_AE, DV_FE, group_AE, group_FE, strDV, ylimits) {
# DV_AE = column for DV, amblyopic eye (eg data$uAE)
# DV_FE = column for DV, fellow eye (eg data$uFE)
# group = column for group (eg data$Cond)
# strDV = string, DV name (for plot)
# ylimits = c(min, max)
# missing data checks
if (any(is.na(DV_AE))) {
ind <- !is.na(DV_AE)
DV_AE <- DV_AE[ind]
group_AE <- group_AE[ind]
}
if (any(is.na(DV_FE))) {
ind <- !is.na(DV_FE)
DV_FE <- DV_FE[ind]
group_FE <- group_FE[ind]
}
group_AE <- paste0(group_AE, ' (AE)')
group_FE <- paste0(group_FE, ' (FE)')
desc_matrix <- groupMeans_byEye(c(DV_AE, DV_FE), c(group_AE, group_FE))
# pretty-ify the stack for stripchart function
if (strDV == 'u') {
# round to the nearest 10ths
xvar = round(c(DV_AE, DV_FE),1)
} else {
# round to the nearest even
xvar <- round(c(DV_AE, DV_FE)*2,1)/2
}
# plot
stripchart(xvar ~ c(group_AE, group_FE),
group.names = c('AE', 'FE', 'AE', 'FE', 'AE', 'FE'),
xlab = ' ',
ylab = paste(strDV, '[SE]'),
xlim = c(0.5,6.5),
ylim = ylimits,
method = 'stack', offset = 0.4,
pch = c(pchAM, pchAM, pchBD, pchBD, pchNS, pchNS),
col = c(colAM, colAM, colBD, colBD, colNS, colNS),
bg=grey_transp, vertical=TRUE,
cex.axis=1.2, cex.lab=1.2)
grid(nx = NA, ny = NULL)
offset <- 0.2
drawlinesX <- c(1, 1, NA, 2, 2, NA,
3, 3, NA, 4, 4, NA,
5, 5, NA, 6, 6) - offset
drawlinesY <- c(desc_matrix[1,1] + desc_matrix[1,2],
desc_matrix[1,1] - desc_matrix[1,2], NA,
desc_matrix[2,1] + desc_matrix[2,2],
desc_matrix[2,1] - desc_matrix[2,2], NA,
desc_matrix[3,1] + desc_matrix[3,2],
desc_matrix[3,1] - desc_matrix[3,2], NA,
desc_matrix[4,1] + desc_matrix[4,2],
desc_matrix[4,1] - desc_matrix[4,2], NA,
desc_matrix[5,1] + desc_matrix[5,2],
desc_matrix[5,1] - desc_matrix[5,2], NA,
desc_matrix[6,1] + desc_matrix[6,2],
desc_matrix[6,1] - desc_matrix[6,2])
lines(drawlinesX, drawlinesY, col="black", lwd=3)
points(c(1,2,3,4,5,6)-offset , desc_matrix[,1],
pch = c(pchAM, pchAM, pchBD, pchBD, pchNS, pchNS),
col = c(colAM_solid, colAM_solid,
colBD_solid, colBD_solid,
colNS_solid, colNS_solid),
cex = 1.2)
mtext('amblyopia', side = 1, at=1.5, font=1, line = 2, cex=1, col=colAM_solid)
mtext('strabismus', side = 1, at=3.5, font=1, line=2,cex=1, col=colBD_solid)
mtext('control', side = 1, at=5.5, font=1, line=2,cex=1, col=colNS_solid)
}
RegressPlot <- function(x, y, group, legendTF, xlab, ylab, xlim, ylim) {
group <- relevel(group, 'NS') # normally-sighted folks are the ref
mod_all <-lm(y ~ group + x)
coefs_all <- coef(mod_all)
b_all <- coefs_all[4]
a_NS <- coefs_all[1]
a_AM <- coefs_all[1] + coefs_all[2]
a_BD <- coefs_all[1] + coefs_all[3]
# plot the x,y data
plot(x,y,
xlab = xlab,
ylab = ylab,
xlim = xlim,
ylim = ylim,
type = 'n',
cex = 1,
cex.lab = 1.2,
cex.axis = 1
)
grid(nx = NULL, ny = NULL)
# Add the correlation lines
# amblyopia
abline(a=a_AM, b = b_all,
lwd=1.5,
lty=2,
col=colAM_solid)
# strab
abline(a=a_BD, b=b_all,
lwd=1.5,
lty=3,
col=colBD_solid)
# control
abline(a = a_NS, b = b_all,
lwd=1.5,
lty=4,
col=colNS_solid)
# add points
# add amblyopia
points(x[group == 'AM'], y[group == 'AM'],
pch = pchAM, col=colAM)
# add strab
points(x[group == 'BD'], y[group == 'BD'],
pch = pchBD, col=colBD)
# add control
points(x[group == 'NS'], y[group == 'NS'],
pch = pchNS, col=colNS)
if (legendTF == TRUE) {
legendloc <- 'bottomleft'
legend(legendloc, legend=c('amblyopia', 'strabismus', 'control'),
col=c(colAM_solid, colBD_solid, colNS_solid),
pch=c(pchAM, pchBD, pchNS),
bty='n',
inset = c(0.05, 0),
y.intersp = 0.7,
lwd=c(1,1), lty=c(2,3,4), cex=0.7)
}
}
correlPlot <- function(x, y, group, legendTF, xlab, ylab, xlim, ylim) {
# Get coefficient for the plot
mod_full <- lm(y ~ x)
xycor <- round(cor(x, y),2)
# plot the x,y data
plot(x,y,
xlab = xlab,
ylab = ylab,
xlim = xlim,
ylim = ylim,
type = 'n',
cex = 0.8,
cex.lab = 0.8,
cex.axis = 0.8
)
grid(nx = NULL, ny = NULL)
# Add the unity line
abline(a=0, b=1, col='black')
# add points
# add amblyopia
points(x[group == 'AM'], y[group == 'AM'],
pch = pchAM, col=colAM)
# add strab
points(x[group == 'BD'], y[group == 'BD'],
pch = pchBD, col=colBD)
# add control
points(x[group == 'NS'], y[group == 'NS'],
pch = pchNS, col=colNS)
# add means
t.am.x <- t.test(x[group == 'AM'])
t.am.y <- t.test(y[group == 'AM'])
t.bd.x <- t.test(x[group == 'BD'])
t.bd.y <- t.test(y[group == 'BD'])
t.ns.x <- t.test(x[group == 'NS'])
t.ns.y <- t.test(y[group == 'NS'])
m.am.x <- t.am.x$estimate
m.am.y <- t.am.y$estimate
m.bd.x <- t.bd.x$estimate
m.bd.y <- t.bd.y$estimate
m.ns.x <- t.ns.x$estimate
m.ns.y <- t.ns.y$estimate
se.am.x <- t.am.x$stderr
se.am.y <- t.am.y$stderr
se.bd.x <- t.bd.x$stderr
se.bd.y <- t.bd.y$stderr
se.ns.x <- t.ns.x$stderr
se.ns.y <- t.ns.y$stderr
drawlinesX <- c(m.am.x - se.am.x, m.am.x + se.am.x, NA,
m.bd.x - se.bd.x, m.bd.x + se.bd.x, NA,
m.ns.x - se.ns.x, m.ns.x + se.ns.x, NA,
m.am.x, m.am.x, NA,
m.bd.x, m.bd.x, NA,
m.ns.x, m.ns.x)
drawlinesY <- c(m.am.y, m.am.y, NA,
m.bd.y, m.bd.y, NA,
m.ns.y, m.ns.y, NA,
m.am.y - se.am.y, m.am.y + se.am.y, NA,
m.bd.y - se.bd.y, m.bd.y + se.bd.y, NA,
m.ns.y - se.ns.y, m.ns.y + se.ns.y)
lines(drawlinesX, drawlinesY, col='black', lwd=1.5)
points(m.am.x, m.am.y,
pch = c(pchAM),
col = c(colAM_solid),
cex = 1.5)
points(m.bd.x, m.bd.y,
pch = c(pchBD),
col = c(colBD_solid),
cex = 1.5)
points(m.ns.x, m.ns.y,
pch = c(pchNS),
col = c(colNS_solid),
cex = 1.5)
if (legendTF == TRUE) {
legendloc <- 'bottomright'
legend(legendloc, legend=c('amblyopia', 'strabismus', 'control'),
col=c(colAM_solid, colBD_solid, colNS_solid),
pch=c(pchAM, pchBD, pchNS),
bty='n',
inset = c(0.05, 0),
y.intersp = 0.7,
lwd=c(1,1), lty=c(2,3,4), cex=0.7)
}
}
## Helpful lil functions
groupMeans <- function(DV, group) {
# DV = column for DV (eg data$delay)
# group = column for group (eg data$Cond)
# get means and SEs
t_AM <- t.test(DV[group == 'AM'])
desc_AM <- c(t_AM$estimate, t_AM$stderr, t_AM$conf.int)
t_BD <- t.test(DV[group == 'BD'])
desc_BD <- c(t_BD$estimate, t_BD$stderr, t_BD$conf.int)
# workaround (error if controls have all same [eg stereo] values)
t_NS <- try(t.test(DV[group == 'NS']))
desc_NS <- c(t_NS$estimate, t_NS$stderr, t_NS$conf.int)
descriptives <- rbind(desc_AM, desc_BD, desc_NS)
rownames(descriptives) <- c('AM', 'BD', 'NS')
colnames(descriptives) <- c('mean', 'stderr', '95ci-low', '95ci-upp')
return(descriptives)
}
groupMeans_byEye <- function(DV, group) {
# get means and SEs
t_AM_AE <- t.test(DV[group == 'AM (AE)'])
desc_AM_AE <- c(t_AM_AE$estimate, t_AM_AE$stderr, t_AM_AE$conf.int)
t_AM_FE <- t.test(DV[group == 'AM (FE)'])
desc_AM_FE <- c(t_AM_FE$estimate, t_AM_FE$stderr, t_AM_FE$conf.int)
# workaround for controls having stereo values that are all the same (good stereo) is needed
t_NS_AE <- try(t.test(DV[group == 'NS (AE)']))
desc_NS_AE <- c(t_NS_AE$estimate, t_NS_AE$stderr, t_NS_AE$conf.int)
t_NS_FE <- try(t.test(DV[group == 'NS (FE)']))
desc_NS_FE <- c(t_NS_FE$estimate, t_NS_FE$stderr, t_NS_FE$conf.int)
#
t_BD_AE <- t.test(DV[group == 'BD (AE)'])
desc_BD_AE <- c(t_BD_AE$estimate, t_BD_AE$stderr, t_BD_AE$conf.int)
t_BD_FE <- t.test(DV[group == 'BD (FE)'])
desc_BD_FE <- c(t_BD_FE$estimate, t_BD_FE$stderr, t_BD_FE$conf.int)
descriptives <- rbind(desc_AM_AE, desc_AM_FE,
desc_BD_AE, desc_BD_FE,
desc_NS_AE, desc_NS_FE)
rownames(descriptives) <- c('AM (AE)','AM (FE)',
'BD (AE)', 'BD (FE)',
'NS (AE)', 'NS (FE)')
colnames(descriptives) <- c('mean', 'stderr', '95ci-low', '95ci-upp')
return(descriptives)
}
library('psych')
library('tidyr')
library('rstatix')
library('lm.beta')
library('kableExtra')
library('effectsize')
# read in data
# (This is generated using combine_data_files.R so if you added/updated
# any data make sure to run this to combine the descriptives with the joysticks)
load('~/Documents/UW/allthegit/JoystickPsycho/Analysis/fits_012022/combinedDataForAnalysis.RData')
# loads data frame called, imaginatively, data
data_newfits <- read.csv('/Users/bear/Downloads/dynamic_contrast/fitdata_psychophysics/psychophysics__fits.csv')
new_vars <- names(data_newfits)
# quick check for correct ids
if (all(data$sID == data_newfits$sID) == FALSE) {
paste0('WARNING CHECK SID')
}
# replace
for (i in 2:length(new_vars)) {
data[new_vars[i]] <- data_newfits[new_vars[i]]
}
data_reduced <- read.csv('/Users/bear/Documents/UW/allthegit/JoystickPsycho/Analysis/dataForManuscript/reduced_fits.csv')
data_reduced <- subset(data_reduced, sID != "AM_LE_G_KK_28")
# quick check for correct ids
if (all(data_reduced$sID == data_newfits$sID) == FALSE) {
paste0('WARNING CHECK SID')
}
kae_means <- printMeansAndSDs(data$kAE, data$Cond, 2)
kae_ttest <- printTTestResult(data$kAE, data$Cond)
sigma_means <- printMeansAndSDs(data$sigma, data$Cond, 2)
sigma_ttest <- printTTestResult(data$sigma, data$Cond)
mse_means <- printMeansAndSDs(data$softmaxErr, data$Cond, 3)
mse_ttest <- printTTestResult(data$softmaxErr, data$Cond)
kAEuAEcor <- cor.test(data$uAE, data$kAE)
kAEuAEcor_AM <- cor.test(data$uAE[data$Cond=='AM'], data$kAE[data$Cond=='AM'])
kae_ttest
sigma_ttest
mse_ttest
uae_means <- printMeansAndSDs(data$uAE, data$Cond, 2)
ufe_means <- printMeansAndSDs(data$uFE, data$Cond, 2)
u_stats <- printAnovaByEyeTable(data, c('uAE', 'uFE'))
uae_means
ufe_means
u_stats
data$uAE
data$uAE>100
data$uAE_cln <- data$uAE
data$uAE_cln[data$uAE_cln > 40] <- NA
data$uFE_cln <- data$uFE
data$uFE_cln[data$uAE_cln > 40] <- NA # no uFE outliers but remove for ANOVA
data$uAE_log <- log10(abs(data$uAE))
data$uFE_log <- log10(abs(data$uFE))
data$uAE_logp1 <- log10((data$uAE+1))
data$uFE_logp1 <- log10((data$uFE+1))
data$uAE_cube <- sign(data$uAE) * (abs(data$uAE)^(1/3))
data$uFE_cube <- sign(data$uFE) * (abs(data$uFE)^(1/3))
min(data$uAE_log)
max(data$uAE_log)
min(data$uFE_log)
max(data$uFE_log)
min(data$uAE)
min(data$acuityAE)
min(data$acuityAE,na.rm=TRUE)
max(data$acuityAE,na.rm=TRUE)
log10(0)
log10(0.01)
log10(0.0000001)
data$uAE < 0
data$uAE < 1
data$uAE < 0.00001
hist(data$uAE)
hist(data$uAE[data$uAE < 1])
hist(data$uAE[data$uAE < .5])
hist(data$uAE[data$uAE < .1])
hist(data$uAE[data$uAE < .04])
hist(data$uAE[data$uAE < .03])
hist(data$uAE[data$uAE < .003])
sum(data$uAE[data$uAE < .003])
sum(data$uAE < .003)
data$sID[data$uAE < .003]
data$sID[data$uAE < .001]
sum(data$uAE < .001)
sum(data$uAE < .0001)
sum(data$uAE < .00001)
sum(data$uAE < .000001)
sum(data$uAE < .0000001)
sum(data$uAE < .00000001)
sum(data$uAE < .000000001)
sum(data$uAE < .000000000001)
sum(data$uAE < .0000000001)
sum(data$uAE < .00000000001)
sum(data$uAE < .0000000001)
sum(data$uFE < .0000000001)
data$sID[data$uFE < .0000000001]
.0001e-1
.0001e-1 < 0000000001
.0001e-1 < .0000000001
.0001e-2 < .0000000001
.0001e-10 < .0000000001
.0001e-6 < .0000000001
.0001e-8 < .0000000001
.0001e-7 < .0000000001
.0001e-6 < .0000000001
.1e-6 < .0000000001
1e-6 < .0000000001
1e-6 > .0000000001
1e-10 < .0000000001
1e-12 < .0000000001
1e-11 < .0000000001
1e-10 == .0000000001
wilcox.test(data$uAE[data$Cond != 'BD'], as.numeric(data$Cond[data$Cond != 'BD']), paired=FALSE)
wilcox.test(data$uFE[data$Cond != 'BD'], as.numeric(data$Cond[data$Cond != 'BD']), paired=FALSE)
setwd("/Users/bear/Downloads/dynamic_contrast/analysis_vep")
source('r_helper_functions.R')
csvModelFitsPath <- file.path('..', 'fitdata_vep', 'vep_psychophysics_fits.csv')
data <- read.csv(csvModelFitsPath)
csvModelFitsPath <- file.path('..',
'fitdata_vep_psychophysics', 'vep_psychophysics_fits.csv')
data <- read.csv(csvModelFitsPath)
csvModelFitsPath <- file.path('..',
'fitdata_vep_psychophysics', 'vep_psychophysics_congruent_fits.csv')
data <- read.csv(csvModelFitsPath)
data$group <- as.factor(data$group)
names(data)
summary(data$group)
Ns <- summary(data$group)
Ns
sum(Ns)
Ns$NS
Ns['NS']
names(dataa)
names(data)
data$clean_range[1]
round(data$delay)
round(data$delay,2)
max(data$delay)
ceil_round(max(data$delay),2)
ceil_round(max(data$delay),1)
min(data$intercept)
max(data$intercept)
names(data)
mean(data$n_good)
min(data$n_good)
max(data$n_good
)
data$joyCalErrMean
round(data$joyCalErrMean,3)
round(data$joyCalErrMean,4)
names(data)
x <- data$beforeRefit_kLE
y <- data$kLE
# plot the x,y data
plot(x,y,
xlab = 'k(left) before refit',
ylab = 'final k(left)',
xlim = c(0,1),
ylim = c(0,1),
type = 'n',
cex = 0.8,
cex.lab = 0.8,
cex.axis = 0.8
)
grid(nx = NULL, ny = NULL)
# Add the unity line
abline(a=0, b=1, col='black')
# add points
# add amblyopia
points(x[group == 'AM'], y[group == 'AM'],
pch = pchAM, col=colAM)
x <- data$beforeRefit_kLE
y <- data$kLE
group <- data$group
# plot the x,y data
plot(x,y,
xlab = 'k(left) before refit',
ylab = 'final k(left)',
xlim = c(0,1),
ylim = c(0,1),
type = 'n',
cex = 0.8,
cex.lab = 0.8,
cex.axis = 0.8
)
grid(nx = NULL, ny = NULL)
# Add the unity line
abline(a=0, b=1, col='black')
# add points
# add amblyopia
points(x[group == 'AM'], y[group == 'AM'],
pch = pchAM, col=colAM)
# add strab
points(x[group == 'BD'], y[group == 'BD'],
pch = pchBD, col=colBD)
# add control
points(x[group == 'NS'], y[group == 'NS'],
pch = pchNS, col=colNS)
x <- data$beforeRefit_kRE
y <- data$kRE
group <- data$group
# plot the x,y data
plot(x,y,
xlab = 'k(left) before refit',
ylab = 'final k(left)',
xlim = c(0,1),
ylim = c(0,1),
type = 'n',
cex = 0.8,
cex.lab = 0.8,
cex.axis = 0.8
)
grid(nx = NULL, ny = NULL)
# Add the unity line
abline(a=0, b=1, col='black')
# add points
# add amblyopia
points(x[group == 'AM'], y[group == 'AM'],
pch = pchAM, col=colAM)
# add strab
points(x[group == 'BD'], y[group == 'BD'],
pch = pchBD, col=colBD)
# add control
points(x[group == 'NS'], y[group == 'NS'],
pch = pchNS, col=colNS)
ylims <- c(floor_round(min(c(data$uAE, data$uFE), na.rm=TRUE),1),
ceil_round(max(c(data$uAE, data$uFE), na.rm=TRUE),1))
stripchart_w_means_byeye(data$uAE, data$uFE, data$group, data$group,
'U', ylims)
u_stats <- printAnovaByEyeTable(data, c('uAE', 'uFE'))
library('psych')
library('tidyr')
library('rstatix')
library('lm.beta')
library('kableExtra')
library('effectsize')
u_stats <- printAnovaByEyeTable(data, c('uAE', 'uFE'))
u_stats
data$sigma
csvModelFitsPath <- file.path('..',
'fitdata_vep_psychophysics', 'vep_psychophysics_congruent_fits.csv')
data <- read.csv(csvModelFitsPath)
data$group <- as.factor(data$group)
data$uAE
data$uAE > 60
data$uAE[data$uAE > 60]
data$sID[data$uAE > 60]
data$sigma[data$uAE > 60]
mean(data$uFE)
mean(data$uFE[data$group=='AM'])
mean(data$uFE[data$group=='BD'])
mean(data$uFE[data$group=='NS'])
